// <auto-generated />
using System;
using GachaMoon.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GachaMoon.Database.Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241011114559_AddGameResultTables")]
    partial class AddGameResultTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GachaMoon.Domain.Accounts.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("GachaMoon.Domain.Accounts.AccountBannerHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("BannerId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BannerId");

                    b.ToTable("AccountBannerHistory");
                });

            modelBuilder.Entity("GachaMoon.Domain.Accounts.AccountBannerStats", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("BannerType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RollsToEpic")
                        .HasColumnType("integer");

                    b.Property<int>("RollsToLegendary")
                        .HasColumnType("integer");

                    b.Property<int>("TotalEpicRolls")
                        .HasColumnType("integer");

                    b.Property<int>("TotalLegendaryRolls")
                        .HasColumnType("integer");

                    b.Property<int>("TotalRolls")
                        .HasColumnType("integer");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "BannerType")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("AccountBannerStats");
                });

            modelBuilder.Entity("GachaMoon.Domain.Accounts.AccountCharacter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("CharacterExperience")
                        .HasColumnType("integer");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("CharacterLevel")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FreeSkillPoints")
                        .HasColumnType("integer");

                    b.Property<int>("RepeatCount")
                        .HasColumnType("integer");

                    b.Property<string>("SkillTree")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalSkillPoints")
                        .HasColumnType("integer");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("AccountId", "CharacterId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("AccountCharacters");
                });

            modelBuilder.Entity("GachaMoon.Domain.Accounts.AccountCharacterAbility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AbilityType")
                        .HasColumnType("integer");

                    b.Property<long>("AccountCharacterId")
                        .HasColumnType("bigint");

                    b.Property<long>("CharacterAbilityId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountCharacterId");

                    b.HasIndex("CharacterAbilityId");

                    b.HasIndex("AbilityType", "AccountCharacterId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("AccountCharacterAbilities");
                });

            modelBuilder.Entity("GachaMoon.Domain.Accounts.PremiumInventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PremiumCurrencyAmount")
                        .HasColumnType("integer");

                    b.Property<int>("StandardBannerRollsAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WildcardSkillItemCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("PremiumInventories");
                });

            modelBuilder.Entity("GachaMoon.Domain.Animes.Anime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasDefaultValue("ERR");

                    b.Property<int>("AnimeBaseId")
                        .HasColumnType("integer");

                    b.Property<string>("AnimeType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("ERR");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EpisodeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ImageSiteTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("MeanScore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0);

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasDefaultValue("ERR");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AnimeBaseId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("GachaMoon.Domain.Animes.AnimeAlias", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("AnimeId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("ERR");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.HasIndex("AnimeId");

                    b.ToTable("AnimeAliases");
                });

            modelBuilder.Entity("GachaMoon.Domain.Animes.AnimeEpisode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AnimeId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EpisodeNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("AnimeEpisodes");
                });

            modelBuilder.Entity("GachaMoon.Domain.Animes.AnimeImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AnimeEpisodeId")
                        .HasColumnType("bigint");

                    b.Property<int>("BadVoteCount")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VoteCount")
                        .HasColumnType("integer");

                    b.Property<long>("VoteSum")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AnimeEpisodeId");

                    b.ToTable("AnimeImages");
                });

            modelBuilder.Entity("GachaMoon.Domain.Banners.Banner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BannerExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("GachaMoon.Domain.Banners.BannerCharacter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BannerId")
                        .HasColumnType("bigint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BannerId");

                    b.HasIndex("CharacterId");

                    b.ToTable("BannerCharacters");
                });

            modelBuilder.Entity("GachaMoon.Domain.Characters.Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CharacterType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CharacterType = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Аккихи",
                            Rarity = 2,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 2L,
                            CharacterType = 2,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Шувидор",
                            Rarity = 2,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 3L,
                            CharacterType = 4,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Кадзуал",
                            Rarity = 2,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 4L,
                            CharacterType = 3,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Чехов",
                            Rarity = 1,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 5L,
                            CharacterType = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Черная Мамба",
                            Rarity = 1,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 6L,
                            CharacterType = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Яна Цист",
                            Rarity = 1,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 7L,
                            CharacterType = 4,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Панкоед",
                            Rarity = 1,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        });
                });

            modelBuilder.Entity("GachaMoon.Domain.Characters.CharacterAbility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AbilityRange")
                        .HasColumnType("integer");

                    b.Property<int>("AbilityTarget")
                        .HasColumnType("integer");

                    b.Property<int>("AbilityType")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CharacterAbilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AbilityRange = 1,
                            AbilityTarget = 3,
                            AbilityType = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Эта атака является затычкой, и не должна появляться у персонажа.",
                            Name = "Placeholder: basic attack",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 2L,
                            AbilityRange = 1,
                            AbilityTarget = 3,
                            AbilityType = 2,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Эта атака является затычкой, и не должна появляться у персонажа.",
                            Name = "Placeholder: special attack",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 3L,
                            AbilityRange = 2,
                            AbilityTarget = 3,
                            AbilityType = 3,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Эта атака является затычкой, и не должна появляться у персонажа.",
                            Name = "Placeholder: ultimate attack",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 4L,
                            AbilityRange = 0,
                            AbilityTarget = 0,
                            AbilityType = 4,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Это умение является затычкой, и не должно появляться у персонажа.",
                            Name = "Placeholder: passive skill",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 5L,
                            AbilityRange = 1,
                            AbilityTarget = 3,
                            AbilityType = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Бросает сюрикен в указанного противника, нанося урон в зависимости от силы атаки персонажа.",
                            Name = "Бросок сюрикена",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        });
                });

            modelBuilder.Entity("GachaMoon.Domain.Characters.CharacterBaseStats", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("integer");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("CharacterLevel")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Defence")
                        .HasColumnType("integer");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId", "CharacterLevel")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("CharacterBaseStats");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Attack = 150,
                            CharacterId = 1L,
                            CharacterLevel = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Defence = 80,
                            Health = 100,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 2L,
                            Attack = 100,
                            CharacterId = 2L,
                            CharacterLevel = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Defence = 140,
                            Health = 100,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 3L,
                            Attack = 160,
                            CharacterId = 3L,
                            CharacterLevel = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Defence = 70,
                            Health = 100,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 4L,
                            Attack = 60,
                            CharacterId = 4L,
                            CharacterLevel = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Defence = 100,
                            Health = 140,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 5L,
                            Attack = 140,
                            CharacterId = 5L,
                            CharacterLevel = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Defence = 50,
                            Health = 90,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 6L,
                            Attack = 120,
                            CharacterId = 6L,
                            CharacterLevel = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Defence = 70,
                            Health = 100,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 7L,
                            Attack = 130,
                            CharacterId = 7L,
                            CharacterLevel = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Defence = 90,
                            Health = 70,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        });
                });

            modelBuilder.Entity("GachaMoon.Domain.Characters.DefaultCharacterAbility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AbilityType")
                        .HasColumnType("integer");

                    b.Property<long>("CharacterAbilityId")
                        .HasColumnType("bigint");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CharacterAbilityId");

                    b.HasIndex("CharacterId", "AbilityType")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("DefaultCharacterAbilities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AbilityType = 1,
                            CharacterAbilityId = 1L,
                            CharacterId = 1L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 2L,
                            AbilityType = 2,
                            CharacterAbilityId = 2L,
                            CharacterId = 1L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 3L,
                            AbilityType = 3,
                            CharacterAbilityId = 3L,
                            CharacterId = 1L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 4L,
                            AbilityType = 4,
                            CharacterAbilityId = 4L,
                            CharacterId = 1L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 5L,
                            AbilityType = 1,
                            CharacterAbilityId = 1L,
                            CharacterId = 2L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 6L,
                            AbilityType = 2,
                            CharacterAbilityId = 2L,
                            CharacterId = 2L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 7L,
                            AbilityType = 3,
                            CharacterAbilityId = 3L,
                            CharacterId = 2L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 8L,
                            AbilityType = 4,
                            CharacterAbilityId = 4L,
                            CharacterId = 2L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 9L,
                            AbilityType = 1,
                            CharacterAbilityId = 1L,
                            CharacterId = 3L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 10L,
                            AbilityType = 2,
                            CharacterAbilityId = 2L,
                            CharacterId = 3L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 11L,
                            AbilityType = 3,
                            CharacterAbilityId = 3L,
                            CharacterId = 3L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 12L,
                            AbilityType = 4,
                            CharacterAbilityId = 4L,
                            CharacterId = 3L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 13L,
                            AbilityType = 1,
                            CharacterAbilityId = 1L,
                            CharacterId = 4L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 14L,
                            AbilityType = 2,
                            CharacterAbilityId = 2L,
                            CharacterId = 4L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 15L,
                            AbilityType = 3,
                            CharacterAbilityId = 3L,
                            CharacterId = 4L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 16L,
                            AbilityType = 4,
                            CharacterAbilityId = 4L,
                            CharacterId = 4L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 17L,
                            AbilityType = 1,
                            CharacterAbilityId = 1L,
                            CharacterId = 5L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 18L,
                            AbilityType = 2,
                            CharacterAbilityId = 2L,
                            CharacterId = 5L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 19L,
                            AbilityType = 3,
                            CharacterAbilityId = 3L,
                            CharacterId = 5L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 20L,
                            AbilityType = 4,
                            CharacterAbilityId = 4L,
                            CharacterId = 5L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 21L,
                            AbilityType = 1,
                            CharacterAbilityId = 5L,
                            CharacterId = 6L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 22L,
                            AbilityType = 2,
                            CharacterAbilityId = 2L,
                            CharacterId = 6L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 23L,
                            AbilityType = 3,
                            CharacterAbilityId = 3L,
                            CharacterId = 6L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 24L,
                            AbilityType = 4,
                            CharacterAbilityId = 4L,
                            CharacterId = 6L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 25L,
                            AbilityType = 1,
                            CharacterAbilityId = 1L,
                            CharacterId = 7L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 26L,
                            AbilityType = 2,
                            CharacterAbilityId = 2L,
                            CharacterId = 7L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 27L,
                            AbilityType = 3,
                            CharacterAbilityId = 3L,
                            CharacterId = 7L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 28L,
                            AbilityType = 4,
                            CharacterAbilityId = 4L,
                            CharacterId = 7L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        });
                });

            modelBuilder.Entity("GachaMoon.Domain.ExternalServices.AccountConnectedExternalService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExternalServiceProvider")
                        .HasColumnType("integer");

                    b.Property<int>("ExternalServiceType")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalServiceUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAnimeList")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId", "ExternalServiceType")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("AccountExternalServices");
                });

            modelBuilder.Entity("GachaMoon.Domain.Npcs.NpcCharacter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ChallengeRating")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NpcType")
                        .HasColumnType("integer");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("NpcCharacters");
                });

            modelBuilder.Entity("GachaMoon.Domain.Npcs.NpcCharacterAbility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterAbilityId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("NpcCharacterId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CharacterAbilityId");

                    b.HasIndex("NpcCharacterId");

                    b.ToTable("NpcCharacterAbilities");
                });

            modelBuilder.Entity("GachaMoon.Domain.Npcs.NpcCharacterBaseStats", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Defence")
                        .HasColumnType("integer");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<long>("NpcCharacterId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NpcCharacterId");

                    b.ToTable("NpcCharacterBaseStats");
                });

            modelBuilder.Entity("GachaMoon.Domain.Promocodes.Promocode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsesLeft")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("Promocodes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "APRILFOOLS",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ExpiryDate = new DateOnly(2025, 4, 1),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UsesLeft = 100
                        },
                        new
                        {
                            Id = 2L,
                            Code = "SORRYFROZEN",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ExpiryDate = new DateOnly(2025, 4, 1),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UsesLeft = 100
                        },
                        new
                        {
                            Id = 3L,
                            Code = "GIVEMEROLLS",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ExpiryDate = new DateOnly(2025, 4, 1),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UsesLeft = 100
                        });
                });

            modelBuilder.Entity("GachaMoon.Domain.Promocodes.PromocodeEffect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EffectAmount")
                        .HasColumnType("integer");

                    b.Property<int>("EffectType")
                        .HasColumnType("integer");

                    b.Property<long>("PromoCodeId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PromoCodeId", "EffectType")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("PromocodeEffects");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            EffectAmount = 1000,
                            EffectType = 1,
                            PromoCodeId = 1L,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            EffectAmount = 1000,
                            EffectType = 1,
                            PromoCodeId = 2L,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            EffectAmount = 10,
                            EffectType = 2,
                            PromoCodeId = 3L,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L)
                        });
                });

            modelBuilder.Entity("GachaMoon.Domain.Promocodes.PromocodeHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PromoCodeId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PromoCodeId");

                    b.HasIndex("AccountId", "PromoCodeId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("PromocodeHistory");
                });

            modelBuilder.Entity("GachaMoon.Domain.Quiz.GameFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GameResultId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GameResultId");

                    b.HasIndex("AccountId", "GameResultId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("GameFeedbacks");
                });

            modelBuilder.Entity("GachaMoon.Domain.Quiz.GameResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GameRecap")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GameType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("GameResults");
                });

            modelBuilder.Entity("GachaMoon.Domain.Users.ExternalUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserType", "AccountId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.HasIndex("UserType", "Identifier")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("ExternalUsers");
                });

            modelBuilder.Entity("GachaMoon.Domain.Users.InternalUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("bytea");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique()
                        .HasFilter("\"DeletedAt\" is NULL");

                    b.ToTable("InternalUsers");
                });

            modelBuilder.Entity("GachaMoon.Domain.Accounts.AccountBannerHistory", b =>
                {
                    b.HasOne("GachaMoon.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GachaMoon.Domain.Banners.Banner", "Banner")
                        .WithMany()
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Banner");
                });

            modelBuilder.Entity("GachaMoon.Domain.Accounts.AccountBannerStats", b =>
                {
                    b.HasOne("GachaMoon.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GachaMoon.Domain.Accounts.AccountCharacter", b =>
                {
                    b.HasOne("GachaMoon.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GachaMoon.Domain.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("GachaMoon.Domain.Accounts.AccountCharacterAbility", b =>
                {
                    b.HasOne("GachaMoon.Domain.Accounts.AccountCharacter", "AccountCharacter")
                        .WithMany()
                        .HasForeignKey("AccountCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GachaMoon.Domain.Characters.CharacterAbility", "CharacterAbility")
                        .WithMany()
                        .HasForeignKey("CharacterAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountCharacter");

                    b.Navigation("CharacterAbility");
                });

            modelBuilder.Entity("GachaMoon.Domain.Accounts.PremiumInventory", b =>
                {
                    b.HasOne("GachaMoon.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GachaMoon.Domain.Animes.AnimeAlias", b =>
                {
                    b.HasOne("GachaMoon.Domain.Animes.Anime", "Anime")
                        .WithMany("AnimeAliases")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("GachaMoon.Domain.Animes.AnimeEpisode", b =>
                {
                    b.HasOne("GachaMoon.Domain.Animes.Anime", "Anime")
                        .WithMany("AnimeEpisodes")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("GachaMoon.Domain.Animes.AnimeImage", b =>
                {
                    b.HasOne("GachaMoon.Domain.Animes.AnimeEpisode", "AnimeEpisode")
                        .WithMany("AnimeImages")
                        .HasForeignKey("AnimeEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnimeEpisode");
                });

            modelBuilder.Entity("GachaMoon.Domain.Banners.BannerCharacter", b =>
                {
                    b.HasOne("GachaMoon.Domain.Banners.Banner", "Banner")
                        .WithMany("BannerCharacters")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GachaMoon.Domain.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("GachaMoon.Domain.Characters.CharacterBaseStats", b =>
                {
                    b.HasOne("GachaMoon.Domain.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("GachaMoon.Domain.Characters.DefaultCharacterAbility", b =>
                {
                    b.HasOne("GachaMoon.Domain.Characters.CharacterAbility", "CharacterAbility")
                        .WithMany()
                        .HasForeignKey("CharacterAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GachaMoon.Domain.Characters.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("CharacterAbility");
                });

            modelBuilder.Entity("GachaMoon.Domain.ExternalServices.AccountConnectedExternalService", b =>
                {
                    b.HasOne("GachaMoon.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GachaMoon.Domain.Npcs.NpcCharacterAbility", b =>
                {
                    b.HasOne("GachaMoon.Domain.Characters.CharacterAbility", "CharacterAbility")
                        .WithMany()
                        .HasForeignKey("CharacterAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GachaMoon.Domain.Npcs.NpcCharacter", "NpcCharacter")
                        .WithMany()
                        .HasForeignKey("NpcCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterAbility");

                    b.Navigation("NpcCharacter");
                });

            modelBuilder.Entity("GachaMoon.Domain.Npcs.NpcCharacterBaseStats", b =>
                {
                    b.HasOne("GachaMoon.Domain.Npcs.NpcCharacter", "NpcCharacter")
                        .WithMany()
                        .HasForeignKey("NpcCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NpcCharacter");
                });

            modelBuilder.Entity("GachaMoon.Domain.Promocodes.PromocodeEffect", b =>
                {
                    b.HasOne("GachaMoon.Domain.Promocodes.Promocode", "Promocode")
                        .WithMany("PromocodeEffects")
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promocode");
                });

            modelBuilder.Entity("GachaMoon.Domain.Promocodes.PromocodeHistory", b =>
                {
                    b.HasOne("GachaMoon.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GachaMoon.Domain.Promocodes.Promocode", "Promocode")
                        .WithMany()
                        .HasForeignKey("PromoCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Promocode");
                });

            modelBuilder.Entity("GachaMoon.Domain.Quiz.GameFeedback", b =>
                {
                    b.HasOne("GachaMoon.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GachaMoon.Domain.Quiz.GameResult", "GameResult")
                        .WithMany()
                        .HasForeignKey("GameResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("GameResult");
                });

            modelBuilder.Entity("GachaMoon.Domain.Users.ExternalUser", b =>
                {
                    b.HasOne("GachaMoon.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GachaMoon.Domain.Users.InternalUser", b =>
                {
                    b.HasOne("GachaMoon.Domain.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GachaMoon.Domain.Animes.Anime", b =>
                {
                    b.Navigation("AnimeAliases");

                    b.Navigation("AnimeEpisodes");
                });

            modelBuilder.Entity("GachaMoon.Domain.Animes.AnimeEpisode", b =>
                {
                    b.Navigation("AnimeImages");
                });

            modelBuilder.Entity("GachaMoon.Domain.Banners.Banner", b =>
                {
                    b.Navigation("BannerCharacters");
                });

            modelBuilder.Entity("GachaMoon.Domain.Promocodes.Promocode", b =>
                {
                    b.Navigation("PromocodeEffects");
                });
#pragma warning restore 612, 618
        }
    }
}
